=====================
Dispersion descriptor
=====================

:sup:`test`

The universal quantitative dispersion descriptor :cite:`pollice_universal_2019`
can be calculated either approximately based on tabulated vdW radii, or more
accurately based on computed electron density isosurfaces. Dispersion is
modelled with the D3 :cite:`grimme_consistent_2010` or D4
:cite:`caldeweyher_extension_2017` methods (the latter requires an external
program).

***************
Preparing input
***************

There are two options for using surfaces based on the electron density:

1. Electron density in Gaussian cube format. Cube files can be generated by
   various quantum-chemical programs, including Gaussian_.

2. Exported surface from the `Multiwfn program`_. These are generated via
   the surface analysis module of the program (option 12 in the main menu).
   After generating the surface, it should be exported to a file using the
   hidden option 66. This generates a file, "vtx.pdb" that can be read by
   ·¥ç·¥è Ä“ì·¥á·¥ús. For more information, see Section 3.15.4 of the
   `Multiwfn manual`_. 

*******************
Command line script
*******************

The command line script provides access to the basic functionality through
the terminal.

.. code-block:: console
  :caption: Example
  
  $ morfeus_dispersion n-heptane.xyz
  Surface area (√Ö^2): 223.6
  Surface volume (√Ö^3): 205.0
  P_int (kcal^(1/2) mol^(-1/2): 15.6

--cube_file <str>
  Name of cube file of electron density.
--d3_file <str>
  Output file of D3 program
--d4_file <str>
  Output file of D4 program.
--density <float>
  Density of points on sphere vdW surface (default: 0.01)
--isodensity <float>
  Isodensity value for density from cube file
--surface_from_radii
  Construct pseudo-surface from vdW radii
--verbose
  Print atom areas
--vertex_file <str>
  Vertex file from Multiwfn

More information is given with ``morfeus_dispersion --help``

******
Module
******

The Dispersion class is provided to calculate and store the dispersion
descriptors.

.. code-block:: python
  :caption: Example

  >>> elements, coordinates = read_xyz("corannulene.xyz")
  >>> dispersion = Dispersion(elements, coordinates)
  >>> dispersion.print_report()
  Surface area (√Ö^2): 284.6
  Surface volume (√Ö^3): 290.0
  P_int (kcal^(1/2) mol^(-1/2): 20.8
  >>> dispersion.atom_p_int[1]
  30.19400990954629

By default, the molecular surface is constructed from vdW spheres and an
internal D3 code is used. The choice of vdW radii can be changed from the 
default of ``rahm`` to either ``bondi`` or ``crc`` with ``radii_type=<str>``.
Custom radii can be supplied with ``radii=<list>``. Density of points on the 
vdW surface is controlled with ``density=<float>``. Dispersion coefficients can
be read from the output of Grimme's D3 and D4 programs with the
:py:meth:`morfeus.morfeus.Dispersion.get_coefficients` method. To suppress
the internal D3 code, set ``calculate_coefficients=False`` appropriately. To
use another surface, suppress the vdW surface creation with
``point_surface=False`` and use the
:py:meth:`morfeus.morfeus.Dispersion.surface_from_cube` or 
:py:meth:`morfeus.morfeus.Dispersion.surface_from_multiwfn` methods.

.. code-block:: python
  :caption: Example with external cube and coefficients files

  >>> elements, coordinates = read_xyz("corannulene.xyz")
  >>> dispersion = Dispersion(elements, coordinates, point_surface=False)
  >>> dispersion.load_coefficients("d4_corannulene", "d4")
  >>> dispersion.surface_from_cube("corannulene.cub")
  >>> dispersion.compute_p_int()
  >>> dispersion.print_report()
  Surface area (√Ö^2): 248.0
  Surface volume (√Ö^3): 247.8
  P_int (kcal^(1/2) mol^(-1/2): 25.8
  >>> dispersion.atom_p_int[1]
  36.344232419525866

To exclude atoms from the calculation, the atom indices (starting at 1) should
be provided with ``excluded_atoms=<list>``. This can for example be used to
calculate substitutent P_int values.

Grimme's `dftd4 program`_ can be used to calculate the dispersion coefficients
with the D4 method. The accompanying dftd4 python package must also be
installed in the same Python environment as Morfeus. An example is given below:

.. code-block:: python
  :caption: Example with Grimme's dftd4 code

  >>> elements, coordinates = read_xyz("pme3.xyz")
  >>> dispersion = Dispersion(elements, coordinates, compute_coefficients=False)
  >>> dispersion.compute_coefficients(model="gd4")
  >>> dispersion.compute_p_int()
  >>> dispersion.print_report()
  Surface area (√Ö^2): 178.4
  Surface volume (√Ö^3): 157.8
  P_int (kcal^(1/2) mol^(-1/2): 20.1

The D4 model is available with 'gd4', a D3-like model with 'gd3' and the
internal D3 code with 'id3'. The maximum order of the dispersion coefficients
can be set with the keyword argument 'order', but should be left by the
non-expert user at the default setting of 8 (*i.e.* C\ :sub:`6` and C\ :sub:`8`)

For more detailed information, use ``help(Dispersion)`` or see the API:
:py:class:`morfeus.morfeus.Dispersion`

.. note::

  Use the command line flag ``--molc6`` to get the dftd4 program to write the
  dispersion coefficients. 

**********
Background
**********

The üç∫P\ :sub:`int` dispersion descriptor was introduced by Pollice and Chen as
a quantitative descriptor for dispersion interactions
:cite:`pollice_universal_2019`. ·¥ç·¥è Ä“ì·¥á·¥ús can calculate P\ :sub:`int` based on an
electron density isosurface, as in the original article. In addition, we have
found that a very fast method based on surfaces constructed from vdW radii
correlate well with P\ :sub:`int` from electron densities, at a fraction of the
cost.   

.. todo::
  add figure here benchmarks/local_force/benchmark.png

**********
References
**********

.. bibliography:: refs.bib
  :style: unsrt
  :filter: docname in docnames

.. _dftd4 program: https://github.com/grimme-lab/dftd4
.. _Gaussian: https://gaussian.com/cubegen/
.. _Multiwfn program: http://sobereva.com/multiwfn/
.. _Multiwfn manual: http://sobereva.com/multiwfn/Multiwfn_manual.html
